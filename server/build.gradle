buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "com.github.node-gradle:gradle-node-plugin:1.3.0"
        classpath "org.grails.plugins:hibernate5:7.3.0"
        classpath "org.grails.plugins:views-gradle:2.3.2"
    }
}

version "0.1"
group "io.nuptse.pasal"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.node-gradle.node"
apply plugin:"org.grails.plugins.views-json"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-codecs"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-datasource"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:spring-security-rest:3.0.1"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.11.Final"
    implementation "org.grails.plugins:views-json"
    implementation "org.grails.plugins:views-json-templates"
    profile "org.grails.profiles:react"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    implementation 'org.grails.plugins:spring-security-core:5.2.0'
    // runtimeOnly "com.h2database:h2"
    // [start added deps] ==>
    runtimeOnly "mysql:mysql-connector-java:8.0.32"

    // [end added deps] <==
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "io.micronaut:micronaut-http-client"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails:views-json-testing-support"
    testImplementation "org.hibernate.validator:hibernate-validator:6.1.7.Final"

}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

// deploy info stuffs
/*war {
    if (grails.util.Environment.current.name == "production") {
        println "===============> Writing build info log <==========================="
        // Find the right file
        File grailsBuildInfoFile = new File("${project.rootDir}/build.info")
        if (!grailsBuildInfoFile) return // No need to continue if the file is not there
        Properties properties = new Properties()
        // Read properties from the file
        grailsBuildInfoFile.withInputStream {
            properties.load(it)
        }
        // Add new properties from various sources
        properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))
        // Get a System property
        properties.setProperty('build.java.version', System.getProperty('java.version'))
        // Get the host name where the build was created
        properties.setProperty('build.host', InetAddress.localHost.hostName)
        // Add property set by your CI (in this case Bamboo)
        // Map<String, String> env = System.getenv()
        def buildNumber = properties.getProperty("build.number")

        properties.setProperty('build.git.revision', getRevision())
        properties.setProperty('build.git.branch', getBranch())
        properties.setProperty('build.number', increaseBuildNumber(buildNumber))
        // Write the properties back to the file
        grailsBuildInfoFile.withOutputStream {
            properties.store(it, null)
        }
    }
}*/

def getBranch() {
    Process process = "git rev-parse --abbrev-ref HEAD".execute()
    process.waitFor()
    return process.text ?: 'UNKNOWN'
}

def getRevision() {
    Process process = "git log --oneline --no-abbrev-commit -1".execute()
    process.waitFor()
    return process.text ?: 'UNKNOWN'
}